let mapleader = ","
let maplocalleader = "à"

" Vundle {{{
" If vundle is not installed, do it first
if (!isdirectory(expand('$HOME/.vim/repos/github.com/Shougo/dein.vim')))
    call system(expand('mkdir -p $HOME/.vim/repos/github.com'))
    call system(expand('git clone https://github.com/Shougo/dein.vim $HOME/.vim/repos/github.com/Shougo/dein.vim'))
endif

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim,~/.fzf
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'powerline/powerline'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-repeat'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'mileszs/ack.vim'
Plugin 'docteurklein/php-getter-setter.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'nelsyeung/twig.vim'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'yosiat/oceanic-next-vim'
Plugin 'mechatroner/rainbow_csv'
Plugin 'craigemery/vim-autotag'
Plugin 'arnaud-lb/vim-php-namespace'
Plugin 'neomake/neomake'
Plugin 'junegunn/vim-easy-align'
Plugin 'shumphrey/fugitive-gitlab.vim'

Plugin 'FatalCaca/vim-php-import-checker'

"Plugin 'joonty/vim-phpqa'

Plugin 'tobyS/vmustache'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" }}}

" Misc {{{
    set background=dark
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " Syntax highlighting
    set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

    if has('clipboard')
        if has('unnamedplus')  " When possible use + register for copy-paste
            set clipboard=unnamed,unnamedplus
        else         " On mac and Windows, use * register for copy-paste
            set clipboard=unnamed
        endif
    endif

    set history=1000                    " Store a ton of history (default is 20)
    set hidden                          " Allow buffer switching without saving
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
    set iskeyword=65-90,95,97-122,48-57
    set iskeyword-=:
    set iskeyword-=\$

    " Setting up the directories {
        set backup                  " Backups are nice ...
        if has('persistent_undo')
            set undofile                " So is persistent undo ...
            set undolevels=1000         " Maximum number of changes that can be undone
            set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
        endif

        " To disable views add the following to your .vimrc.before.local file:
        "   let g:spf13_no_views = 1
        if !exists('g:spf13_no_views')
            " Add exclusions to mkview and loadview
            " eg: *.*, svn-commit.tmp
            let g:skipview_files = [
                \ '\[example pattern\]'
                \ ]
        endif
    " }}}

    " Vim UI {{{
        color OceanicNext
        set tabpagemax=100               " Only show 15 tabs
        set showmode                    " Display the current mode
        set cursorline                  " Highlight current line
        set cursorcolumn                " Highlight current column

        highlight clear SignColumn      " SignColumn should match background
        highlight clear LineNr          " Current line number row will have same background color in relative mode

        if has('cmdline_info')
            set ruler                   " Show the ruler
            set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
            set showcmd                 " Show partial commands in status line and
                                        " Selected characters/lines in visual mode
        endif

        if has('statusline')
            set laststatus=2

            " Broken down into easily includeable segments
            set statusline=%<%f\                     " Filename
            set statusline+=%w%h%m%r                 " Options
            set statusline+=\ [%{&ff}/%Y]            " Filetype
            set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
        endif

        set backspace=indent,eol,start  " Backspace for dummies
        set linespace=0                 " No extra spaces between rows
        set incsearch                   " Find as you type search
        set hlsearch                    " Highlight search terms
        set winminheight=0              " Windows can be 0 line high
        set ignorecase                  " Case insensitive search
        set smartcase                   " Case sensitive when uc present
        set wildmenu                    " Show list instead of just completing
        set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
        set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
        set list
        set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
    " }}}

    " Formatting {{{
        set nowrap                      " Do not wrap long lines
        set autoindent                  " Indent at the same level of the previous line
        set shiftwidth=4                " Use indents of 4 spaces
        set expandtab                   " Tabs are spaces, not tabs
        set tabstop=4                   " An indentation every four columns
        set softtabstop=4               " Let backspace delete indent
        set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
        set splitright                  " Puts new vsplit windows to the right of the current
        set splitbelow                  " Puts new split windows to the bottom of the current
        set matchpairs+=<:>             " Match, to be used with %
        set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

        " Remove trailing whitespaces and ^M chars
        "autocmd FileType go autocmd BufWritePre <buffer> Fmt
        autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
        autocmd BufNewFile,BufRead *.js.twig set filetype=javascript
        autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2
        " preceding line best in a plugin but here for now.

        autocmd BufNewFile,BufRead *.coffee set filetype=coffee
    " }}}

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " NeoSnippet {{{
        " Plugin key-mappings.
        imap <C-t>     <Plug>(neosnippet_expand_or_jump)
        smap <C-t>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-t>     <Plug>(neosnippet_expand_target)

        " SuperTab like snippets behavior.
        "imap <expr><TAB>
        " \ pumvisible() ? "\<C-n>" :
        " \ neosnippet#expandable_or_jumpable() ?
        " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        imap <expr><F5> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

        " For conceal markers.
        if has('conceal')
          set conceallevel=2 concealcursor=niv
        endif

        let g:neosnippet#snippets_directory='~/.dotfiles/vim/snippets'
    " }}}

    " fzf {{{
        execute "set <M-p>=\ep"
        nnoremap <c-q> :Files<cr>
        nnoremap <c-p> :GFiles<cr>
    " }}}

    " BÉPO remaps {{{
        " Basic movement in bépo
        nnoremap t gj
        nnoremap s gk
        vnoremap t j
        vnoremap s k

        " Word movement in bépo + basic words
        nnoremap é w
        nnoremap É W
        nnoremap dé dw
        nnoremap yé yw
        nnoremap cé cw
        nnoremap caé caw
        nnoremap cié ciw
        nnoremap daé daw
        nnoremap dié diw
        nnoremap yaé yaw
        nnoremap yié yiw
        nnoremap É caw
        nnoremap dÉ dW
        nnoremap yÉ yW
        nnoremap cÉ cW
        nnoremap vié viw
        nnoremap vaé vaw

        " Var movement
        nnoremap <c-É> f$
        nnoremap <c-B> F$

        " Pour les bépo vanilla
        inoremap » >
    " }}}

    " To erase word with current yank
    nnoremap <leader>p viwp<esc>byw

    nnoremap $ *
    nnoremap * $

    inoremap <c-U> <esc>viwUea
    nnoremap <c-U> <esc>bveUel

    " Quick configuration/snippet files access {{{
        nnoremap <leader>ev :vsplit ~/.dotfiles/vim/vimrc.symlink<cr>
        nnoremap <leader>es :vsplit ~/.dotfiles/vim/snippets/php.snip<cr>
        nnoremap <leader>ets :vsplit ~/.dotfiles/vim/snippets/twig.snip<cr>
        nnoremap <leader>ehs :vsplit ~/.dotfiles/vim/snippets/html.snip<cr>
        nnoremap <leader>etss :vsplit ~/.dotfiles/vim/snippets/ts.snip<cr>
        nnoremap <leader>ebs :vsplit ~/.dotfiles/vim/snippets/sh.snip<cr>
        nnoremap <leader>SV :source ~/.dotfiles/vim/vimrc.symlink<cr>
    " }}}

    " In parentheses/brackets shortcuts {{{
        onoremap p i(
        onoremap ib i(
        onoremap lp :<c-u>normal! F)vi(<cr>
        onoremap np :<c-u>normal! f(vi)<cr>
        onoremap lb :<c-u>normal! F]vi[<cr>
        onoremap nb :<c-u>normal! f[vi]<cr>
        onoremap lc :<c-u>normal! F}vi{<cr>
        onoremap nc :<c-u>normal! f{vi}<cr>
        onoremap l' :<c-u>normal! F'vi'<cr>
        onoremap n' :<c-u>normal! f'vi'<cr>
    " }}}

    nnoremap T i<cr><esc>

    " Navigation parenthèses
    nnoremap ( ?(<cr>
    nnoremap ) /)<cr>
    nnoremap { ?{<cr>
    nnoremap } /}<cr>

    " Déplacements intersplit
    nnoremap <Left> <c-w>h
    nnoremap <Right> <c-w>l
    nnoremap <Down> <c-w>j
    nnoremap <Up> <c-w>k

    nnoremap E <c-]>

    nnoremap S F>
    nnoremap R f<

    inoremap lkj <esc>
    inoremap gq <esc>
    inoremap kj <esc>

    nnoremap + %

    nnoremap Y y$

    nnoremap vis viB
    nnoremap vas vaB

    set nobackup
    set noswapfile
    set pastetoggle=F12

    au WinEnter * set nofen
    au WinLeave * set nofen

    set tags=.git/tags.vendors,.git/tags

    " PhpNamespace {
        function! IPhpInsertUse()
            call PhpInsertUse()
            call feedkeys('a',  'n')
        endfunction

        autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
        autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>1<CR><cr>
    " }

    set wildmenu
    set wildmode=list:longest,full
    set scrolljump=5
    set scrolloff=3

    " Start/End of line navigation
    nnoremap l $
    vnoremap l $
    nnoremap L _
    vnoremap L _

    " Tab navigation
    nnoremap <tab> gt;
    nnoremap <s-tab> gT;

    set lazyredraw

    " Always have focus in the middle of the screen
    set scrolloff=999

    autocmd Filetype js setlocal ts=2 sts=2 sw=2
    autocmd Filetype vue setlocal ts=2 sts=2 sw=2
    autocmd Filetype twig setlocal ts=2 sts=2 sw=2
    autocmd Filetype html setlocal ts=4 sts=4 sw=4
    autocmd Filetype twig setlocal ts=4 sts=4 sw=4

    " rm char and go insert
    noremap X xi

    " quick sf translation
    nnoremap <leader>l cit{{<space>''\|trans<space>}}<esc>F'i

    " clear dirty endofline spaces
    nnoremap <leader>st :%s/ *$//g<cr>/qxg<cr><c-o>

    " change all tabs by 4 spaces
    nnoremap <leader>ts :%s/\t/    /g<cr>

    " autocomplete
    inoremap <s-tab> <c-p>

    " parentheses selection
    nnoremap - vi(

    " NerdTree
    map <c-n> :NERDTreeToggle<CR>
    let g:NERDTreeMapActivateNode = '<space>'
    let g:NERDTreeMapOpenInTab = '<c-T>'
    let g:NERDTreeMapJumpParent = '<c-g>'
    let g:NERDTreeMapOpenVSplit = '<c-v>'
    let g:NERDTreeMapJumpNextSibling = 'T'
    let g:NERDTreeMapJumpPrevSibling = 'S'

    " unimpaired
    nmap < [
    nmap > ]
    vmap q [y
    vmap Q ]y

    " php-cs-fixer
    let g:php_cs_fixer_level = "all"
    let g:php_cs_fixer_config_= "default"
    let g:php_cs_fixer_php_path = "php"
    let g:php_cs_fixer_fixers_list = "linefeed,indentation,trailing_spaces,unused_use,php_closing_tag,return,visibility,braces,phpdoc_params,eof_ending,extra_empty_lines,controls_spaces,elseif"             " List of fixers
    let g:php_cs_fixer_enable_default_mapping = 1   " Enable the mapping by default (<leader>pcd)
    let g:php_cs_fixer_dry_run = 0                  " Call command with dry-run option
    let g:php_cs_fixer_verbose = 0                  " Return the output of command if 1, else an inline information.

    " Fugitive git
    autocmd QuickFixCmdPost *grep* cwindow

    " Ack
    cnoreabbrev Ack Ack!
    nnoremap <Leader>S :Ack!<Space>--twig<Space>--js<space>--php<Space>--ts<space>--html<space>--type-set=twig=.twig<Space>--yaml<Space>-i<Space>--ignore-dir={vendor,var,app/cache,cache,app/public/build}<Space>

    " Getter/Setter
    let g:phpgetset_getterTemplate =
      \ "\n" .
      \ "    public function %funcname%()\n" .
      \ "    {\n" .
      \ "        return $this->%varname%;\n" .
      \ "    }"

    let g:phpgetset_setterTemplate =
      \ "\n" .
      \ "    public function %funcname%($%varname%): self\n" .
      \ "    {\n" .
      \ "        $this->%varname% = $%varname%;\n" .
      \ "\n" .
      \ "        return $this;\n" .
      \ "    }"

    " Hexmode {
        command -bar Hexmode call ToggleHex()

        function ToggleHex()
          " hex mode should be considered a read-only operation
          " save values for modified and read-only for restoration later,
          " and clear the read-only flag for now
          let l:modified=&mod
          let l:oldreadonly=&readonly
          let &readonly=0
          let l:oldmodifiable=&modifiable
          let &modifiable=1

          if !exists("b:editHex") || !b:editHex
            " save old options
            let b:oldft=&ft
            let b:oldbin=&bin

            " set new options
            setlocal binary " make sure it overrides any textwidth, etc.
            silent :e " this will reload the file without trickeries (DOS line endings will be shown entirely )
            let &ft="xxd"

            " set status
            let b:editHex=1
            " switch to hex editor
            %!xxd
          else
            " restore old options
            let &ft=b:oldft
            if !b:oldbin
              setlocal nobinary
            endif

            " set status
            let b:editHex=0
            " return to normal editing
            %!xxd -r
          endif

          " restore values for modified and read only state
          let &mod=l:modified
          let &readonly=l:oldreadonly
          let &modifiable=l:oldmodifiable
        endfunction

        nnoremap <C-H> :Hexmode<CR>
        inoremap <C-H> <Esc>:Hexmode<CR>
        vnoremap <C-H> :<C-U>Hexmode<CR>
    " }

    " Syntax based autocomplete {
        inoremap <c-o> <c-x><c-o>
    " }

    set foldmethod=manual

    " Tabs
    nnoremap <c-"> :tabm<space>1
    nnoremap <c-<> :tabm<space>2
    nnoremap <c->> :tabm<space>3
    nnoremap <c-(> :tabm<space>4
    nnoremap <c-)> :tabm<space>5
    nnoremap <c-@> :tabm<space>6
    nnoremap <c-+> :tabm<space>7
    nnoremap <c--> :tabm<space>8
    nnoremap <c-/> :tabm<space>9
    nnoremap <c-*> :tabm<space>0

    " No more accidental ex mode
    nnoremap Q <nop>

    " Attribute navigation
    nnoremap <leader>n /^\s*\(private\\|protected\\|public\) *\([^ ]* \\|\$\)/e+1<cr>
    nnoremap <leader>N ?^\s*\(private\\|protected\\|public\) *\([^ ]* \\|\$\)?e+1<cr>

    " Conflict markers
    nnoremap <leader>m /[<>=]\{7\}<cr>
    nnoremap <leader>M ?[<>=]\{7\}<cr>
    vnoremap <leader>m /[<>=]\{7\}<cr>
    vnoremap <leader>M ?[<>=]\{7\}<cr>

    " Diff navigation
    nnoremap >> <leader>>c
    nnoremap << <leader><c

    set mouse=""

    " Color for the 80th column
    highlight ColorColumn ctermbg=233
    set cc=81

    " Save & quit
    nnoremap <c-w> :q<cr>
    nnoremap <c-s> :w<cr>

    " Sort
    vnoremap <Leader>s :sort u<cr>

    " Neomak,
    call neomake#configure#automake('nrwi', 500)
    let g:neomake_php_phpcs_args_standard = 'PSR12'

    " Bépo on mac uses an actual french curvy apostrophe. I want a simple straight quote
    inoremap ’ '
    nnoremap vi’ vi'
    nnoremap dt’ dt'
    nnoremap df’ df'
    nnoremap dT’ dT'
    nnoremap dF’ dF'
    nnoremap ct’ ct'
    nnoremap cf’ cf'
    nnoremap cT’ cT'
    nnoremap cF’ cF'
    nnoremap ca’ ca'
    nnoremap da’ da'
    nnoremap ci’ ci'
    nnoremap di’ di'
    nnoremap yi’ yi'

    " Ack the currently hovered word
    nnoremap <leader>q "nyaw :Ack!<Space>--twig<Space>--js<space>--php<Space>--html<space>--type-set=twig=.twig<Space>--yaml<Space>-i<Space>--ignore-dir={vendor,var,app/cache,cache,app/public/build}<Space><c-r>n<cr>
    vnoremap <leader>q "ny :Ack!<Space>--twig<Space>--js<space>--php<Space>--html<space>--type-set=twig=.twig<Space>--yaml<Space>-i<Space>--ignore-dir={vendor,var,app/cache,cache,app/public/build}<Space><c-r>n<cr>

    " Quick brackets
    iabbrev pc []<esc>F]i
    iabbrev pa {}<esc>F}i
    iabbrev pp ()<esc>F)i
    iabbrev pt <><esc>F>i

    " php
    nnoremap gc gg/^class<cr>w
    nnoremap <silent> <Plug>ChangePhpArray %r]<c-o>viwc[<esc><space>x:silent! call repeat#set("\<Plug>ChangePhpArray", v:count)<cr>
    nmap <leader>a <Plug>ChangePhpArray

    map <F4> <Esc>:EnableFastPHPFolds<Cr>
    map <F3> <Esc>:DisablePHPFolds<Cr>

    " very magic search
    nnoremap / /\v
    nnoremap ? ?\v

    " Marker folding for vimscript {{{
    augroup filetype_vim
        autocmd!
        autocmd FileType vim setlocal foldmethod=marker
    augroup END
    " }}}

    " select what just got pasted
    nnoremap gp `[v`]

    " easy align
    xmap \| :EasyAlign<space>*\|<cr>

    " Gitlab for GBrowse
    let g:fugitive_gitlab_domains = ['https://git.staffmatch.it/']

" }


